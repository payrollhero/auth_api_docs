FORMAT: 1A
HOST: https://auth.payrollhero.com

# PayrollHero Auth API

# Overview

This is the authentication api used by PayrollHero.

You need this to access our other apis:

+ [PayrollHero Time API](http://docs.payrollherotimeapi.apiary.io/)
+ [PayrollHero Core API](http://docs.payrollherocoreapi.apiary.io/)

The auth server implements OAUTH2.  Please use the oauth bible as a reference
for this implementation.  We specifically implement OAUTH2 Draft 10.

+ [OAUTH Bible](http://oauthbible.com/)
* [OAUTH2 Draft 10](http://tools.ietf.org/html/draft-ietf-oauth-v2-10)

# Group Authentication

Authentication to the Core API is done through Payrollhero Auth.

Retrieving a token from Payrollhero Auth.

There are two ways of getting the token from Payrollhero Auth. One could either use 3-legged OAuth
authentication or 2-legged OAuth authentication.

## Token Based Authentication

Authentication can be done with the use of a token. The token can be obtained by doing a 2 or 3 legged
OAUTH2 authentication process against https://auth.payrollhero.com.

#### Parameters

    + token (string, optional) ... OAuth Token from auth.payrollhero.com

# Group 3-legged OAuth Authentication

The 3-legged OAuth authentication works well with websites when the user could be redirected to Payrollhero
Auth.

The token can be retrieved by following these steps:

  * Step 1: Redirect the user to https://auth.payrollhero.com/oauth/authorize
  * Step 2: User authorizes the application
  * Step 3: PayrollHero Auth redirects the user back to the application with the code
  * Step 4: Application exchange the code for a token
  * Step 5: Application uses the token to access the rest of the API

Scope Values:
  + read_account
  + read_attendances
  + read_backgrounds
  + read_break_screens
  + read_clockings
  + read_photos
  + read_device_pings
  + read_employees
  + read_logs
  + read_schedules
  + read_server_times
  + read_worksites
  + write_accounts
  + write_attendances
  + write_backgrounds
  + write_break_screens
  + write_clockings
  + write_device_pings
  + write_employees
  + write_logs
  + write_schedules
  + write_server_times
  + write_worksites


## On Auth Endpoint [/oauth/authorize{?client_id,redirect_uri,response_type,scope,state}]

### Authorize - Step 1 [GET]

+ Parameters
    + client_id (required, string) ... Application's client ID obtained from PayrollHero.
    + redirect_uri (required, string) ... Determines where the response is sent. The value must exactly match
      what was registered with PayrollHero.
    + response_type (required, string, `code`) ... should be `code`
    + scope (required, string, `read_employees`) ... Scopes that is needed by the Application. See above for the list of
      possible values. This could be space delimited list or an array parameters.
    + state (required, string) ... parameter sent back to the redirect URI

+ Response 200 (text/html)

## On Application Endpoint [/auth/payroll_hero/callback{?code,scope,state}]

### Code - Step 3 [GET]

+ Parameters
    + code (required, string) ... The code that could be exchanged for a token.
    + scope (optional, string) ... The scope that was authorized by the user.
    + state (optional, string) ... The verbatim state that was sent on step 1.

+ Response 302 (text/html)

## On Auth Endpoint [/oauth/token{?client_id,client_secret,code,grant_type,redirect_uri,type}]

### Code-Token Exchange - Step 4 [POST]

+ Parameters
    + client_id (required, string) ... Application's client ID obtained from PayrollHero.
    + client_secret (required, string) ... Application's client secret set on PayrollHero.
    + code (required, string) ... code from step 3
    + redirect_uri (required, string) ... Determines where the response is sent. The value must exactly match
      what was registered with PayrollHero.
    + type (required, string, `exchange`) ... should be `exchange`

+ Response 200 (application/json)

        {
            "access_token": "9y90xtatectzfwn2n9pe4xx2j0cqr2v",
            "expires_in": 31536000
        }


# Group 2-legged OAuth Authentication

The 2-legged OAuth authentication works well with desktop applications when it's difficult to redirect users.

The application would need to gather the username and password and request PayrollHero Auth for the token.

## On Auth Endpoint [/oauth/token{?client_id,client_secret,grant_type,password,username,type,scope}]

# Group Implicit Grant 2-legged Oauth Authentication

Sometimes it is better (for javascript or public desktop applications) to use the implicit grant.  In this case
you use response_type = 'token' to directly receive a token on redirect.  This allows the app to not have to use
a client_secret and expose it to the user.


### Authorize/Authenticate [POST]

+ Parameters
    + client_id (required, string) ... Application's client ID obtained from PayrollHero.
    + client_secret (required, string) ... Application's client secret set on PayrollHero.
    + grant_type (required, string, `password`) ... should be `password`
    + username (required, string) ... User's username
    + password (required, string) ... User's password
    + response_type (required, string, `exchange`) ... `exchange` for explicit or 'token' for implicit grant.
    + scope (required, string, `read_employees`) ... Scopes that is needed by the Application. See above for the list of
      possible values. This could be space delimited list or an array parameters.

+ Response 200 (application/json)

        {
            "access_token": "9y90xtatectzfwn2n9pe4xx2j0cqr2v",
            "expires_in": 31536000
        }
        
# Group Token Owner Info

Once you have a token, you may request info about the owner of a token by issuing a GET to /me with the token.

This will tell you information about both the owner of the token and the scopes & validity of the token

The 'token_hmac' is an hmac of the token provided.  It may be computed on the client end by using token_hmac = hmac_sha3(token, key: token)

The client is expected to reject this response if token_hmac != computed_token_hmac

## Me [/me{?token}]

### show [GET]

+ Parameters
    + token (required, string) ... The token you are inquiring about

+ Response 200 (application/json)

        {
             "account_id": 4,
             "client_name": "My Application Client Name",
             "employee_id": 888,
             "expires_at": "2016-02-19T20:38:50Z",
             "id": 35,
             "notification_email": "joe@gmail.com",
             "scopes": [
               "read_employees",
               "read_worksites",
               "read_schedules",
               "write_schedules"
             ],
             "token_hmac": "1aa826bf3a7eea9db0a327a740de73c755b955bb1b137ea75dbcf0ab89900c7fded77fc49011da2ba06bb792a6228b793ccbb8a9fda5c63358b841ffffd487f5",
             "type": "Employee",
             "uid": 888,
             "username": "joe_my_company"
        }
        
+ Response 401 (application/json)
     
        {
             "error": "invalid_token",
             "error_description": "Invalid Token"
        }

# Group Employee Information

Once you have an application token, you can request employee details based on the username. The client is expected to reject this response if token_hmac != computed_token_hmac

## Employee [/employee{?token}{?employee_username}]

### show [GET]

Request employee information based on employee username.

+ Parameters
    + token (required, string) ... The applciation token you are authenticating with
    + employee_username (required, string) ... The username of the employee
    
+ Response 200 (application/json)

        {
             "employee_id": 1,
             "account_id": 1
        }

+ Response 404 (application/json)

        {
             "error": "not_found",
             "error_description": "Employee Not Found"
        }

+ Response 401 (application/json)
     
        {
             "error": "invalid_token",
             "error_description": "Invalid Token"
        }

# Group API v1

## Client Status [/api/v1/client_status{?device_platform}{?app_name}{?version}]

### show [GET]

Check for client status.

+ Parameters
    + device_platform: Acme Pad (required, string) - The device platform where the app is installed
    + app_name: MyAwesomeApp (required, string) - The registered application name
    + version: 1.0.0 (required, string) - The semantic version of the application


+ Request Supported Application

    + Attributes
        + device_platform: Acme Pad (required, string)
        + app_name: MyAwesomeApp (required, string)
        + version: 1.0.0 (required, string)

+ Response 200 (application/json)

    + Body
    
            {
                "status": "ok"
            }

    + Attributes (object)
        + status:ok (string, required) - application is fully supported


+ Request Deprecated Application

    + Attributes
        + device_platform: Acme Pad (required, string)
        + app_name: MyAwesomeApp (required, string)
        + version: 0.1.0 (required, string)

+ Response 200 (application/json)

    + Body

            {
                "status": "deprecated",
                "supported_until": 1456950696
            }

    + Attributes (object)
        + status:deprecated (string, required) - application is supported for a limited time
        + supported_until:ok (number, optional) - application is fully supported


+ Request Unsupported Application

    + Attributes
        + device_platform: Acme Pad (required, string)
        + app_name: MyAwesomeApp (required, string)
        + version: 0.0.1 (required, string)

+ Response 200 (application/json)

    + Body

            {
                "status": "unsupported"
            }

    + Attributes (object)
        + status:unsupported (string, required) - application is not guaranteed to work